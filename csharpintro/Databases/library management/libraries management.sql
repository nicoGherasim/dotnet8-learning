-- DROP DATABASE LibrariesManagement;

CREATE DATABASE LibrariesManagement;

USE LibrariesManagement;

CREATE TABLE Libraries
(
    Id INT IDENTITY(1, 1) PRIMARY KEY,
    Name VARCHAR(50),
    StreetName VARCHAR(50),
    City VARCHAR(50)
)

CREATE TABLE Librarians
(
    Id INT IDENTITY(1, 1) PRIMARY KEY,
    Name VARCHAR(30),
    HireDate Date,
    IsOnHoliday VARCHAR(3),
    LibraryId INT REFERENCES Libraries(Id)
)

CREATE TABLE Books
(
    Id INT IDENTITY(1, 1) PRIMARY KEY,
    Title VARCHAR(50),
    AuthorFirstName VARCHAR(30),
    AuthorLastName VARCHAR(30),
    Type VARCHAR(10), -- crime, fantasy, horror, adventure
)

CREATE TABLE Books_Libraries
(
    Id INT IDENTITY(1, 1) PRIMARY KEY,
    BookId INT REFERENCES Books(Id),
    LibraryId INT REFERENCES Libraries(Id)
)

CREATE TABLE Sales
(
    Id INT IDENTITY(1, 1) PRIMARY KEY,
    NumberOfCopies INT,
    LibraryId INT REFERENCES Libraries(Id),
    LibrarianId INT REFERENCES Librarians(Id)
)

CREATE TABLE Books_Sales
(
    Id INT IDENTITY(1, 1) PRIMARY KEY,
    BookId INT REFERENCES Books(Id),
    SalesId INT REFERENCES Sales(Id)
)

-- 1. Find at least 4 improvements that must be applied to the database structure. 
-- DO NOT drop the entire table and create it again with the better structure - use ALTER commands instead.
-- Tip: some new additional tables should be created for a part of the 4 improvements.

-- 1st: separate the information about a library's address in another table
CREATE TABLE Addresses
(
    Id INT IDENTITY(1, 1) PRIMARY KEY,
    StreetName VARCHAR(50),
    City VARCHAR(50)
)

ALTER TABLE Libraries
DROP COLUMN StreetName;

ALTER TABLE Libraries
DROP COLUMN City;

ALTER TABLE Libraries
ADD AddressId INT REFERENCES Addresses(Id);

-- 2nd & 3rd: separate the information about the authors in a different table & add Email column as it is required in an exercise
CREATE TABLE Authors
(
    Id INT IDENTITY(1, 1) PRIMARY KEY,
    FirstName VARCHAR(30),
    LastName VARCHAR(30),
    Email VARCHAR(50)
)

ALTER TABLE Books
DROP COLUMN AuthorFirstName;

ALTER TABLE Books
DROP COLUMN AuthorLastName;

ALTER TABLE Books
ADD AuthorId INT REFERENCES Authors(Id);

-- 4th: the type of books should be only from a set of values so separating it from the Books table would make the database easier to maintain
CREATE TABLE BookTypes
(
    Id INT IDENTITY(1, 1) PRIMARY KEY,
    TypeName VARCHAR(10)
)

ALTER TABLE Books
DROP COLUMN Type;

ALTER TABLE Books
ADD TypeId INT REFERENCES BookTypes(Id);

-- 5th: IsOnHoliday can only hold two values (true or false) so changing its data type to BIT as it fits best the boolean data type
ALTER TABLE Librarians
ALTER COLUMN IsOnHoliday BIT;

-- 6th: Remove LibraryId from Sales table as it is redundant (Librarian already has a connection with a Library and a Sale has a connection to a Librarian)
-- first the foreign key constraint must be dropped and after that the column itself can be droped
-- !!!note: 4222D4EF below is a hexadecimal sequence number generated by SQL Server so it will be (most probably) different on your database
ALTER TABLE Sales
DROP CONSTRAINT FK__Sales__LibraryId__4222D4EF;

ALTER TABLE Sales
DROP COLUMN LibraryId;

-- Inserting data after the structure is better
INSERT INTO Addresses
VALUES('Independentei', 'Iasi');
INSERT INTO Addresses
VALUES('Splai Bahlui', 'Iasi');
INSERT INTO Addresses
VALUES('Carol I', 'Iasi');

SELECT *
FROM Addresses;

INSERT INTO Libraries
VALUES ('Library1', 1);
INSERT INTO Libraries
VALUES ('Library2', 2);
INSERT INTO Libraries
VALUES ('Library3', 3);

SELECT * 
FROM Libraries;

INSERT INTO Librarians
VALUES('Librarian1', '2005-01-01', 0, 1);
INSERT INTO Librarians
VALUES('Librarian2', '2015-01-01', 0, 1);
INSERT INTO Librarians
VALUES('Librarian3', '2020-01-01', 0, 2);
INSERT INTO Librarians
VALUES('Librarian4', '2021-01-01', 0, 2);
INSERT INTO Librarians
VALUES('Librarian5', '2010-01-01', 0, 3);
INSERT INTO Librarians
VALUES('Librarian6', '2012-01-01', 0, 3);

SELECT *
FROM Librarians;

INSERT INTO Authors
VALUES('FirstName1', 'LastName1', 'author1@email.com');
INSERT INTO Authors
VALUES('FirstName2', 'LastName2', 'author2@email.com');
INSERT INTO Authors
VALUES('FirstName3', 'LastName3', 'author3@email.com');
INSERT INTO Authors
VALUES('FirstName4', 'LastName4', 'author4@email.com');
INSERT INTO Authors
VALUES('FirstName5', 'LastName5', 'author5@email.com');

SELECT * 
FROM Authors;

INSERT INTO BookTypes
VALUES('Crime');
INSERT INTO BookTypes
VALUES('Fantasy');
INSERT INTO BookTypes
VALUES('Horror');
INSERT INTO BookTypes
VALUES('Adventure');

SELECT *
FROM BookTypes;

INSERT INTO Books
VALUES('Title1', 1, 1);
INSERT INTO Books
VALUES('Title2', 1, 1);
INSERT INTO Books
VALUES('Title3', 1, 1);
INSERT INTO Books
VALUES('Title4', 2, 1);
INSERT INTO Books
VALUES('Title5', 2, 2);
INSERT INTO Books
VALUES('Title6', 3, 2);
INSERT INTO Books
VALUES('Title7', 3, 3);
INSERT INTO Books
VALUES('Title8', 3, 3);
INSERT INTO Books
VALUES('Title9', 4, 4);
INSERT INTO Books
VALUES('Title10', 5, 4);

SELECT *
FROM Books;

INSERT INTO Books_Libraries
VALUES(1, 1);
INSERT INTO Books_Libraries
VALUES(2, 1);
INSERT INTO Books_Libraries
VALUES(3, 1);
INSERT INTO Books_Libraries
VALUES(4, 1);
INSERT INTO Books_Libraries
VALUES(5, 2);
INSERT INTO Books_Libraries
VALUES(6, 2);
INSERT INTO Books_Libraries
VALUES(7, 2);
INSERT INTO Books_Libraries
VALUES(8, 3);
INSERT INTO Books_Libraries
VALUES(9, 3);
INSERT INTO Books_Libraries
VALUES(10, 3);
INSERT INTO Books_Libraries
VALUES(1, 1);
INSERT INTO Books_Libraries
VALUES(2, 1);
INSERT INTO Books_Libraries
VALUES(3, 1);
INSERT INTO Books_Libraries
VALUES(4, 1);
INSERT INTO Books_Libraries
VALUES(5, 2);

SELECT *
FROM Books_Libraries; 

INSERT INTO Sales
VALUES(2, 1);
INSERT INTO Sales
VALUES(20, 1);
INSERT INTO Sales
VALUES(7, 1);
INSERT INTO Sales
VALUES(1, 2);
INSERT INTO Sales
VALUES(220, 2);
INSERT INTO Sales
VALUES(5, 3);
INSERT INTO Sales
VALUES(3, 4);
INSERT INTO Sales
VALUES(2, 5);
INSERT INTO Sales
VALUES(2, 5);
INSERT INTO Sales
VALUES(8, 6);

SELECT * 
FROM Sales;

INSERT INTO Books_Sales
VALUES(1, 1);
INSERT INTO Books_Sales
VALUES(2, 1);
INSERT INTO Books_Sales
VALUES(3, 1);
INSERT INTO Books_Sales
VALUES(4, 2);
INSERT INTO Books_Sales
VALUES(5, 3);
INSERT INTO Books_Sales
VALUES(6, 4);
INSERT INTO Books_Sales
VALUES(7, 5);
INSERT INTO Books_Sales
VALUES(8, 6);
INSERT INTO Books_Sales
VALUES(9, 7);
INSERT INTO Books_Sales
VALUES(10, 8);
INSERT INTO Books_Sales
VALUES(1, 9);
INSERT INTO Books_Sales
VALUES(2, 10);
INSERT INTO Books_Sales
VALUES(3, 2);
INSERT INTO Books_Sales
VALUES(4, 3);
INSERT INTO Books_Sales
VALUES(5, 4);

SELECT * 
FROM Books_Sales;

-- 2. Display all the librarians together with the library name ordered by librarian name and library name descending.
-- Librarians.* is selecting all the attributes of the Librarians table so we don't need to write Librarians.Id, Librarians.Name, Librarians.HireDate etc.
SELECT Librarians.*, Libraries.Name AS 'Library Name'
FROM Libraries
JOIN Librarians on Libraries.Id = Librarians.LibraryId
ORDER BY Librarians.Name DESC, Libraries.Name DESC;

-- 3. Update all the street names to start with "STR.".
UPDATE Addresses
SET StreetName = 'STR. '+ StreetName;

SELECT *
FROM Addresses;

-- 4. Display the authors' email for those who have more than 3 books published.
SELECT a.Email, COUNT(a.Email) AS 'Nr of published books'
FROM Authors a 
JOIN Books b ON a.Id = b.AuthorId
GROUP BY a.Email
HAVING COUNT(a.Email) >= 3;

-- OR
SELECT a.Email 'Authors''s email with more than 3 books published'
FROM Authors a
JOIN Books b ON a.Id = b.AuthorId
GROUP BY a.Email
HAVING COUNT(a.Email) >= 3;

-- 5. Display the library name and the book name of the largest sale (the highest number of copies sold in one sale).
SELECT l.Name, b.Title
FROM Libraries l 
JOIN Librarians lb on l.Id = lb.LibraryId
JOIN Sales s ON lb.Id = s.LibrarianId
JOIN Books_Sales bs ON s.Id = bs.SalesId
JOIN Books b ON bs.BookId = b.Id
WHERE s.NumberOfCopies = ( SELECT MAX (NumberOfCopies) FROM Sales);

-- 6. Display all the librarians that are not on holiday and are hired more than 5 years ago.
SELECT * 
FROM Librarians
WHERE IsOnHoliday = 0 AND HireDate < GETDATE() - YEAR(5)

-- 7. Create a stored procedure that displays, based on the book title, the number of libraries in which the book is found. 
-- Call the procedure with three different book titles.
GO
CREATE PROCEDURE GetNumberOfLibrariesInWhichABookIsSoldByBookTitle (@BookTitle varchar(50))
AS
BEGIN
    SELECT COUNT(bl.LibraryId) as 'Number of libraries in which the book is sold'
    FROM Books b
    JOIN Books_Libraries bl ON b.Id = bl.BookId
    WHERE b.Title = @BookTitle
    GROUP BY b.Title
END
GO

EXEC GetNumberOfLibrariesInWhichABookIsSoldByBookTitle @BookTitle='Title1';
EXEC GetNumberOfLibrariesInWhichABookIsSoldByBookTitle @BookTitle='Title2';
EXEC GetNumberOfLibrariesInWhichABookIsSoldByBookTitle @BookTitle='Title6';

-- 8. Create a function that returns, based on the author's email, the number of copies sold for each of his / her books.
-- Call the function with three different emails.
GO
CREATE FUNCTION dbo.GetNumberOfSoldCopiesByAuthorEmailAndBookTitle(@AuthorEmail VARCHAR(50), @BookTitle VARCHAR(50))
RETURNS INT
AS
BEGIN
DECLARE @numberOfSoldCopies INT;
SET @numberOfSoldCopies = 
    (
        SELECT SUM(s.NumberOfCopies)
        FROM Sales s
        JOIN Books_Sales bs ON s.Id = bs.SalesId
        JOIN Books b ON bs.BookId = b.Id
        JOIN Authors a ON b.AuthorId = a.Id
        GROUP BY b.Title, a.Email
        HAVING a.Email = @AuthorEmail AND b.Title = @BookTitle
    );
RETURN @numberOfSoldCopies;
END;
GO

select dbo.GetNumberOfSoldCopiesByAuthorEmailAndBookTitle('author1@email.com', 'Title1');
select dbo.GetNumberOfSoldCopiesByAuthorEmailAndBookTitle('author1@email.com', 'Title2');
select dbo.GetNumberOfSoldCopiesByAuthorEmailAndBookTitle('author1@email.com', 'Title3');

-- 9. Create a trigger so that when a new librarian is added to the system (with no library assigned - NULL on LibraryId), he / she is automatically assigned to a library.
GO
CREATE TRIGGER AssignFirstLibraryAsDefaultForLibrarians
ON Librarians
AFTER INSERT
AS
BEGIN
    UPDATE Librarians
    SET LibraryId = 1
    WHERE LibraryId IS NULL
END 
GO

-- insert one librarian with NULL library
INSERT INTO Librarians
VALUES ('Librarian7','2022-01-01', 0, NULL);
-- check that the new Librarian has the library with id 1 automatically assigned because of the trigger
SELECT *
FROM Librarians;

-- 10. Create a transaction that should have at least three comands inside it. Based on the loggic you think of use a savepoint and a rollback operation.
BEGIN TRANSACTION;

UPDATE Librarians 
SET IsOnHoliday = 0;

SAVE TRANSACTION SetAllLibrariansNotOnLeave;

DELETE FROM Librarians
WHERE HireDate > GETDATE() - DAY(1);

DELETE FROM Sales
WHERE NumberOfCopies < 1;

ROLLBACK TRANSACTION SetAllLibrariansNotOnLeave;

-- check the consequences of the transaction above
SELECT * 
FROM Librarians;

SELECT *
FROM Sales;
